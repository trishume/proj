#!/usr/bin/env ruby
# vi: set filetype=ruby fileencoding=UTF-8 shiftwidth=2 tabstop=2 expandtab

require "commander/import"
require "proj"
require "yaml"
require "pathname"

program :name, 'proj'
program :version, Proj::VERSION
program :description, "Command line tool for managing projects"

asker = lambda {|quest,secret| ask("#{quest}: ") { |q| q.echo = !secret }}


command :new do |c|
  c.syntax = 'proj new <name> [options]'
  c.description = 'Create a new project'
  c.option '-d','--defaults','Use defaults instead of prompts'
  c.action do |args,options|
    comm = Proj::Commands::Create.new(asker)
    comm.run(args.first,options.defaults)
  end
end

command :import do |c|
  c.syntax = 'proj import <path> [options]'
  c.description = 'Import an existing project.'
  c.option '-d','--defaults','Use defaults instead of prompts'
  c.action do |args,options|
    comm = Proj::Commands::Import.new(asker)
    comm.run(args.first || ".",options.defaults)
  end
end

command :rm do |c|
  c.syntax = 'proj rm <name>'
  c.description = 'Stop proj managing a project.'
  c.action do |args,options|
    comm = Proj::Commands::Remove.new(asker)
    comm.run(args.first)
  end
end

command :dir do |c|
  c.syntax = 'proj dir <name>'
  c.description = 'Fuzzy search for a project, outputs the project folder.'
  c.action do |args,options|
    comm = Proj::Commands::Dir.new(asker)
    comm.run(args.first)
  end
end

command :commit do |c|
  c.syntax = 'proj commit <name>'
  c.description = 'Add all, commit (asks for a message) and push to origin.'
  c.action do |args,options|
    comm = Proj::Commands::Commit.new(asker)
    comm.run(args.first)
  end
end
