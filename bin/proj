#!/usr/bin/env ruby
# vi: set filetype=ruby fileencoding=UTF-8 shiftwidth=2 tabstop=2 expandtab

require "commander/import"
require "proj"
require "yaml"

program :name, 'proj'
program :version, Proj::VERSION
program :description, "Command line tool for managing projects"


class ProjCommand
  def initialize()
    @config = load_projrc
    @library = Proj::Library.new(@config)
    @library.load(load_projects())
  end

  def load_projrc()
    YAML.load_file(ENV['HOME'] + "/.projrc.yml")
  end

  def projects_file
    File.expand_path(@config['projects_file'])
  end

  def load_projects()
    file = projects_file
    if File.exists?(file)
      YAML.load_file(file)
    else
      {'projects'=>{}}
    end
  end

  def save_projects!
    File.open(projects_file,'w') do |f|
      f.puts @library.to_h.to_yaml
    end
  end

  def get_config(key)
    val = @config[key]
    raise "Config key #{key} must be set in the .projrc.yml file" unless val
    val
  end

  def create_project(name,defaults = false)
    configurator = Proj::Configurator.new(get_config('new_projects'))
    answers = {}
    configurator.questions.each do |attr,question|
      # If defaults flag is set skip questions
      if defaults
        answers[attr] = nil
        next
      end
      ans = ask("#{question}: ")
      answers[attr] = ans.empty? ? nil : ans.strip
    end
    asker = lambda {|quest,secret| ask("#{quest}: ") { |q| q.echo = !secret }}
    attributes = configurator.create(answers,asker)
    # Add the new project to the library
    project = Proj::Project.new(name,attributes)
    @library.add_project(project)
    # Write out the updated project filetype
    save_projects!
  end
end

command :new do |c|
  c.syntax = 'proj new <name> [options]'
  c.description = 'Create a new project'
  c.option '-d','--defaults','Use defaults instead of prompts'
  c.action do |args,options|
    comm = ProjCommand.new
    comm.create_project(args.first,options.defaults)
  end
end
